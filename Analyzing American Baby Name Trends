--Find names that have been given to over 5,000 babies of either sex every year for the 101 years from 1920 through 2020; recall that names only show up in our dataset when at least 5,000 babies have been given that name in a year.

select first_name, sum(num) 
from baby_names
group by first_name
having count(year) =101
order by sum(num) desc

--Classify each name's popularity according to the number of years that the name appears in the dataset.

SELECT first_name, SUM(num),
    CASE WHEN COUNT(year) > 80 THEN 'Classic'
        WHEN COUNT(year) > 50 THEN 'Semi-classic'
        WHEN COUNT(year) > 20 THEN 'Semi-trendy'
        ELSE 'Trendy' END AS popularity_type
FROM baby_names
GROUP BY first_name
ORDER BY first_name;

--Let's take a look at the ten highest-ranked American female names in our dataset.

SELECT
    RANK() OVER(ORDER BY SUM(num) DESC) AS name_rank,
    first_name, SUM(num)
FROM baby_names
WHERE sex = 'F'
GROUP BY first_name
LIMIT 10;

--Return a list of first names which meet this friend's baby name criteria.

select first_name 
from baby_names
where sex ='F'
and year > 2015
and first_name like '%a'
group by first_name 
order by sum(num) desc;

--Find the cumulative number of babies named Olivia over the years since the name first appeared in our dataset.

select year, first_name, num, SUM(num) OVER (ORDER BY year) AS cumulative_olivias 
from baby_names
where first_name = 'Olivia'
order by year;

--Write a query that selects the year and the maximum num of babies given any male name in that year.

select year, max(num) as max_num
from baby_names
where sex = 'M'
group by year;

--Using the previous task's code as a subquery, look up the first_name that corresponds to the maximum number of babies given a specific male name in a year.

select b.year, b.first_name,b.num
from baby_names  b
inner join
(select year, max(num) as max_num
from baby_names
where sex = 'M'
group by year) as subquery
on subquery.year = b.year 
    AND subquery.max_num = b.num
ORDER BY year DESC;
